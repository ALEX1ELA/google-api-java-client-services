on:
  schedule:
    # daily at 12:30 am
    - cron: '30 0 * * *'
  workflow_dispatch:

name: codegen
jobs:
  discovery:
    uses: googleapis/discovery-artifact-manager/.github/workflows/list-services.yml@master
  batch:
    runs-on: ubuntu-20.04
    needs: discovery
    outputs: 
      batches: ${{ steps.chunk.outputs.result }}
    steps:
      - uses: actions/github-script@v5
        id: chunk
        with: 
          script: |
            console.log('splitting service names list into batches')
            const services = ${{ needs.discovery.outputs.services }}
            const MAX_BATCH_SIZE = 2
            const result = [];
            for (let i = 0; i < services.length; i += MAX_BATCH_SIZE) {
              result.push(services.slice(i, i + MAX_BATCH_SIZE).join(' '));
            }
            return result
  generate:
    runs-on: ubuntu-20.04
    needs: batch
    strategy:
      fail-fast: false 
      max-parallel: 4
      matrix: 
        batch: ${{fromJson(needs.batch.outputs.batches)}}
    steps:
      - uses: actions/cache@v2
        with:
          key: apiary-cache
          path: ./google-api-java-client-services
          expire_in: next-build
      - uses: actions/cache@v2
        with:
          key: discovery-cache
          path: ./discovery-artifact-manager
          expire_in: next-build
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: google-api-java-client-services
      - uses: actions/checkout@v2
        with:
          repository: googleapis/discovery-artifact-manager
          fetch-depth: 1
          path: discovery-artifact-manager
      - uses: actions/setup-python@v4
        with:
          python-version: 2.7.18
      - name: Generate services and PR
        run: |
          cd google-api-java-client-services
          git fetch origin
          git checkout main
          services=(${{ matrix.batch }})

          for service in ${services[@]} ; do
            # generates library
            ./.github/workflows/generate.sh $service

            # counts number of changed files
            service_location=./clients/google-api-services-$service
            set -x
            git add $service_location
            CHANGED_FILES=`git diff --cached --numstat | wc -l | awk '{print $1}'`
            git reset -- $service_location # unstage changes
            if [[ $CHANGED_FILES -eq 0 ]]; then
              echo "No changes detected for $service"
            else

              MESSAGE=`echo "chore: regenerate $service client"`
              NEW_BRANCH_NAME=`echo "regenerate-$service"`
              DESCRIPTION=`echo "Generated in GitHub action: https://github.com/${{ github.repository_owner }}/${{ github.repository }}/actions/workflows/codegen.yaml"`

              git checkout -b $NEW_BRANCH_NAME
              git add $service_location

              # configure author
              git config --global user.name "yoshi-code-bot"
              git config --global user.email "yoshi-code-bot@google.com"

              # commit
              git remote set-url origin https://x-access-token:$GH_TOKEN@github.com/$GITHUB_REPOSITORY
              git commit -m "$MESSAGE"
              git push --force --set-upstream origin $NEW_BRANCH_NAME

              # creates PR
              gh pr create --draft -B main -H $NEW_BRANCH_NAME --title "$MESSAGE" --body "$DESCRIPTION"

              git checkout main
            fi
          done 
        env:
          GH_TOKEN: ${{ secrets.YOSHI_CODE_BOT_TOKEN }}
      # - uses: googleapis/code-suggester@v2 # takes the changes from git directory
      #   env:
      #     ACCESS_TOKEN: ${{ secrets.YOSHI_CODE_BOT_TOKEN }}
      #   with:
      #     command: pr
      #     upstream_owner: ${{ github.repository_owner }}
      #     upstream_repo: google-api-java-client-services
      #     description: 'Generated in GitHub action: https://github.com/${{ github.repository_owner }}/${{ github.repository }}/actions/workflows/codegen.yaml'
      #     title: 'chore: regenerate ${{ matrix.service }} client'
      #     message: 'chore: regenerate ${{ matrix.service }} client'
      #     branch: regenerate-${{ matrix.service }}
      #     git_dir: 'google-api-java-client-services/clients/google-api-services-${{ matrix.service }}'
      #     primary: main
      #     force: true
      #     fork: true
